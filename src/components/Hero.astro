---
import { Image } from "astro:assets";
import { LinkButton } from "@astrojs/starlight/components";

const { data } = Astro.props.entry;
const { title = data.title, tagline, image, actions = [] } = data.hero || {};

const imageAttrs = {
  loading: "eager" as const,
  decoding: "async" as const,
  width: 400,
  height: 400,
  alt: image?.alt || "",
};

let darkImage: ImageMetadata | undefined;
let lightImage: ImageMetadata | undefined;
let rawHtml: string | undefined;
if (image) {
  if ("file" in image) {
    darkImage = image.file;
  } else if ("dark" in image) {
    darkImage = image.dark;
    lightImage = image.light;
  } else {
    rawHtml = image.html;
  }
}
---

<link
  href="https://cdnjs.cloudflare.com/ajax/libs/prism/1.24.1/themes/prism-tomorrow.min.css"
  rel="stylesheet"
/>
<script
  src="https://cdnjs.cloudflare.com/ajax/libs/prism/1.24.1/prism.min.js"
  is:inline></script>
<script
  src="https://cdnjs.cloudflare.com/ajax/libs/prism/1.24.1/components/prism-javascript.min.js"
  is:inline></script>
<script is:inline>
  // Initialize Prism after the page loads
  document.addEventListener("DOMContentLoaded", (event) => {
    if (typeof Prism !== "undefined") {
      Prism.highlightAll();
    }
  });
</script>

<div class="hero">
  {
    darkImage && (
      <Image
        src={darkImage}
        {...imageAttrs}
        class:list={{ "light:sl-hidden": Boolean(lightImage) }}
      />
    )
  }
  {
    lightImage && (
      <Image src={lightImage} {...imageAttrs} class="dark:sl-hidden" />
    )
  }
  <!-- {rawHtml && <div class="hero-html sl-flex" set:html={rawHtml} />} -->
  <div class="code-snippet sl-flex hero-html">
    <pre
      class="language-html"><code>{`<!-- Grain #1: Counter A -->
<div g-state='{"count": 0}'>
  <h2>Counter A</h2>
  <button g-click="incrementA">+1</button>
  <span g-text="count"></span>
</div>

<!-- Grain #2: Counter B -->
<div g-state='{"count": 5}'>
  <h2>Counter B</h2>
  <button g-click="decrementB">-1</button>
  <span g-text="count"></span>
</div>

<script src="grains.js"><\/script>
<script>
function incrementA({ get, set }) {
  set({ count: get("count") + 1 });
}

function decrementB({ get, set }) {
  set({ count: get("count") - 1 });
}

Grains.init();
<\/script>`}</code></pre>
  </div>
  <div class="sl-flex stack">
    <div class="sl-flex copy">
      <h1 id="hero-title" data-page-title set:html={title} />
      {tagline && <div class="tagline" set:html={tagline} />}
    </div>
    {
      actions.length > 0 && (
        <div class="sl-flex actions">
          <LinkButton href="/guides/example/">
            See demo
            <svg
              aria-hidden="true"
              class="astro-xwgiixxa astro-c6vsoqas"
              width="16"
              height="16"
              viewBox="0 0 24 24"
              fill="currentColor"
              style="--sl-icon-size: 1.5rem;"
            >
              <path d="M17.92 11.62a1.001 1.001 0 0 0-.21-.33l-5-5a1.003 1.003 0 1 0-1.42 1.42l3.3 3.29H7a1 1 0 0 0 0 2h7.59l-3.3 3.29a1.002 1.002 0 0 0 .325 1.639 1 1 0 0 0 1.095-.219l5-5a1 1 0 0 0 .21-.33 1 1 0 0 0 0-.76Z" />
            </svg>
          </LinkButton>
          <LinkButton variant="minimal" href="https://starlight.astro.build">
            Read the Grains docs
            <svg
              aria-hidden="true"
              class="astro-xwgiixxa astro-c6vsoqas"
              width="16"
              height="16"
              viewBox="0 0 24 24"
              fill="currentColor"
              style="--sl-icon-size: 1.5rem;"
            >
              <path d="M19.33 10.18a1 1 0 0 1-.77 0 1 1 0 0 1-.62-.93l.01-1.83-8.2 8.2a1 1 0 0 1-1.41-1.42l8.2-8.2H14.7a1 1 0 0 1 0-2h4.25a1 1 0 0 1 1 1v4.25a1 1 0 0 1-.62.93Z" />
              <path d="M11 4a1 1 0 1 1 0 2H7a1 1 0 0 0-1 1v10a1 1 0 0 0 1 1h10a1 1 0 0 0 1-1v-4a1 1 0 1 1 2 0v4a3 3 0 0 1-3 3H7a3 3 0 0 1-3-3V7a3 3 0 0 1 3-3h4Z" />
            </svg>
          </LinkButton>
        </div>
      )
    }
  </div>
</div>

<style>
  .hero {
    display: grid;
    align-items: center;
    gap: 1rem;
    padding-bottom: 1rem;
  }

  .hero > img,
  .hero > .hero-html {
    object-fit: contain;
    width: min(70%, 20rem);
    height: auto;
    margin-inline: auto;
  }

  .stack {
    flex-direction: column;
    gap: clamp(1.5rem, calc(1.5rem + 1vw), 2rem);
    text-align: center;
  }

  .copy {
    flex-direction: column;
    gap: 1rem;
    align-items: center;
  }

  .copy > * {
    max-width: 50ch;
  }

  h1 {
    font-size: clamp(
      var(--sl-text-3xl),
      calc(0.25rem + 5vw),
      var(--sl-text-6xl)
    );
    line-height: var(--sl-line-height-headings);
    font-weight: 600;
    color: var(--sl-color-white);
  }

  .tagline {
    font-size: clamp(
      var(--sl-text-base),
      calc(0.0625rem + 2vw),
      var(--sl-text-xl)
    );
    color: var(--sl-color-gray-2);
  }

  .actions {
    gap: 1rem 2rem;
    flex-wrap: wrap;
    justify-content: center;
  }

  @media (min-width: 50rem) {
    .hero {
      grid-template-columns: 7fr 4fr;
      gap: 3%;
      padding-block: clamp(2.5rem, calc(1rem + 10vmin), 10rem);
    }

    .hero > img,
    .hero > .hero-html {
      order: 2;
      width: min(100%, 25rem);
    }

    .stack {
      text-align: start;
    }

    .copy {
      align-items: flex-start;
    }

    .actions {
      justify-content: flex-start;
    }
  }

  .code-snippet {
    position: relative;
    border-radius: 0.5rem;
    font-size: 0.7rem;
    padding: 1px; /* Space for gradient border */
    background: linear-gradient(135deg, #d3c7ae 0%, #41351f 100%);
  }

  .code-snippet pre {
    display: flex;
    flex: 1;
    background: #1e1e1e;
    border-radius: 0.5rem;
    margin: 0 !important;
    overflow-x: auto;
  }

  .code-snippet code {
    color: #d4d4d4;
    font-family: "Fira Code", monospace;
    line-height: 1.4;
    display: block;
  }

  .language-html .token.tag {
    color: #569cd6;
  }

  .language-html .token.attr-name {
    color: #9cdcfe;
  }

  .language-html .token.attr-value {
    color: #ce9178;
  }

  .language-html .token.string {
    color: #ce9178;
  }

  .language-html .token.comment {
    color: #6a9955;
  }

  .language-html .token.keyword {
    color: #c586c0;
  }

  .language-html .token.function {
    color: #dcdcaa;
  }

  .language-html .token.punctuation {
    color: #d4d4d4;
  }

  .language-html .token.operator {
    color: #d4d4d4;
  }

  .language-html .token.number {
    color: #b5cea8;
  }

  .language-html .token.property {
    color: #9cdcfe;
  }

  @media (min-width: 50rem) {
    .code-snippet {
      max-width: 90%;
      margin: 0 auto;
    }
  }
</style>
